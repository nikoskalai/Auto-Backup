/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package folder.backup;

import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FileUtils;
/**
 *
 * @author Nikos
 */
public class MainWindow extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(MainWindow.class.getName());

    String title = "Auto Backup";
    String version = "1.0";

    private int nItems = 0;
    private ArrayList<Folder> list;
    private DefaultTableModel model, model2;
    private int row, col;
    private File backupFolder;
    private File settingsFile;
    private final SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/dd - HH:mm:ss");

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        initSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        folderTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        backupFolderTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        backupButton = new javax.swing.JButton();
        selectBackupFolderButton = new javax.swing.JButton();
        emptyCB = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        backupFolderTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        folderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Folder Name", "Folder Path", "Size(MB)", "Date Created", "Date Modified", "Backup"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(folderTable);

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("-");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        backupFolderTF.setEditable(false);
        backupFolderTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Backup to:");

        backupButton.setText("Backup");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });

        selectBackupFolderButton.setText("Select Backup Folder");
        selectBackupFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBackupFolderButtonActionPerformed(evt);
            }
        });

        emptyCB.setSelected(true);
        emptyCB.setText("Delete previous files");

        backupFolderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folder Name", "Folder Path", "Size(MB)", "Date Created", "Date Modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(backupFolderTable);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Backup folder contents:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backupFolderTF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emptyCB)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectBackupFolderButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(backupButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backupFolderTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backupButton)
                    .addComponent(selectBackupFolderButton)
                    .addComponent(emptyCB)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        if (backupFolder != null && model.getRowCount() > 0) {
            backup();
        } else {
            if (backupFolder == null) {
                JOptionPane.showMessageDialog(null, "Backup folder is not set. Please click 'Select Backup Folder' and try again.", "Warning!", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "You must insert at least one file or folder to backup.", "Warning!", JOptionPane.WARNING_MESSAGE);
            }
        }
        updateBackupTable();
    }//GEN-LAST:event_backupButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addButtonAction();
    }//GEN-LAST:event_addButtonActionPerformed

    private void selectBackupFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBackupFolderButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            backupFolder = fc.getSelectedFile();
            backupFolderTF.setText(backupFolder.getPath());
        }
        updateBackupTable();
    }//GEN-LAST:event_selectBackupFolderButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if(model.getRowCount() > 1){
            int id = new Integer((String) model.getValueAt(row, 0));
            for (Folder f : list) {
                if (id == f.id) {
                    list.remove(f);
                }
            }
        } else {
            list = new ArrayList();
        }
        updateTable();
    }//GEN-LAST:event_removeButtonActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOG.log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow();
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backupButton;
    private javax.swing.JTextField backupFolderTF;
    private javax.swing.JTable backupFolderTable;
    private javax.swing.JCheckBox emptyCB;
    private javax.swing.JTable folderTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton selectBackupFolderButton;
    // End of variables declaration//GEN-END:variables

    private void initSettings() {
        setLocationRelativeTo(null);
        setVisible(true);
        setResizable(true);
        model = (DefaultTableModel) folderTable.getModel();
        list = new ArrayList();
        nItems = 0;
        folderTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                row = folderTable.rowAtPoint(evt.getPoint());
                col = folderTable.columnAtPoint(evt.getPoint());
            }

            @Override
            public void mousePressed(MouseEvent e) {
                Point mousePoint = e.getPoint();
                if (SwingUtilities.isLeftMouseButton(e)) {
                    row = folderTable.rowAtPoint(mousePoint);
                    col = folderTable.columnAtPoint(mousePoint);
                } else if (SwingUtilities.isRightMouseButton(e)) {
                    row = folderTable.rowAtPoint(mousePoint);
                    col = folderTable.columnAtPoint(mousePoint);
                    folderTable.changeSelection(row, col, false, false);
                }
            }
        });
        model2 = (DefaultTableModel) backupFolderTable.getModel();
        setTitle(title + " - " + version);
        settingsFile = new File(System.getProperty("user.dir") + "\\" + title + ".ini");
        backupFolderTable.setAutoCreateRowSorter(true);
        folderTable.setAutoCreateRowSorter(true);
        importSettings();
    }

    private void updateTable() {
        model.setRowCount(0);
        for (Folder f : list) {
            try {
                BasicFileAttributes attr = Files.readAttributes(f.file.toPath(), BasicFileAttributes.class);
                
                Calendar created = Calendar.getInstance();
                created.setTimeInMillis(attr.creationTime().toMillis());
                Calendar modified = Calendar.getInstance();
                modified.setTimeInMillis(attr.lastModifiedTime().toMillis());
                
                double size = FileUtils.sizeOf(f.file)/1024.0;
                size = Math.round(size*100.0)/100.0;
                Object[] obj = new Object[]{f.id + "", f.file.getName(), f.file.getPath(), size+"", sdf.format(created.getTime()), sdf.format(modified.getTime()), true};
                model.addRow(obj);
            } catch (IOException ex) {
                LOG.log(Level.SEVERE, null, ex);
            }
        }
    }

    private void backup() {
        saveSettings();
        if (emptyCB.isSelected()) {
            emptyBackupFolder();
        }
        try {
            for (Folder f : list) {
                System.out.println(checkFileBackup(f));
                if(checkFileBackup(f)){
                    File destFile = new File(backupFolder + "\\" + f.file.getName() + "\\");
                    getSubfolders(f.file, destFile);
                }
            }
            JOptionPane.showMessageDialog(null, "Backup successful to folder:" + backupFolder.getPath(), "Backup Successful.", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error while backing up files.", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void getSubfolders(File file, File destination) throws Exception {
        if (file.exists()) {
            if (file.isDirectory()) {
                if (!destination.exists()) {
                    destination.mkdir();
                }
                for (String strf : file.list()) {
                    File srcFile = new File(file, strf);
                    File destFile = new File(destination, strf);
                    getSubfolders(srcFile, destFile);
                }
            } else if (file.isFile()) {
                try {
                    copyFile(file, destination);
                } catch (IOException ex) {
                    LOG.log(Level.SEVERE, null, ex);
                    throw new Exception(ex);
                }
            }
        }
    }

    private void copyFile(File file, File destination) throws FileNotFoundException, IOException {
        InputStream in = new FileInputStream(file);
        OutputStream out = new FileOutputStream(destination);

        byte[] buffer = new byte[1024];

        int length;
        //copy the file content in bytes
        while ((length = in.read(buffer)) > 0) {
            out.write(buffer, 0, length);
        }

        in.close();
        out.close();
        System.out.println("File copied from " + file + " to " + backupFolder);
    }

    private void saveSettings() {
        BufferedWriter bw = null;
        try {

            bw = new BufferedWriter(new FileWriter(settingsFile));
            bw.write("");

            writeFolderSetting(bw, backupFolder);
            for (Folder f : list) {
                writeFolderSetting(bw, f.file);
            }
            bw.close();
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, null, ex);
        }
    }

    private void writeFolderSetting(BufferedWriter bw, File file) throws IOException {
        bw.append(file.getPath());
        bw.newLine();
    }

    private void importSettings() {
        if (!settingsFile.exists()) {
            return;
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(settingsFile));
            nItems = 0;
            String line = br.readLine();
            backupFolder = new File(line);
            backupFolderTF.setText(backupFolder.getPath());
            while ((line = br.readLine()) != null) {
                File file = new File(line);
                list.add(new Folder(nItems++, file));
            }
            updateTable();
            updateBackupTable();
            br.close();
        } catch (FileNotFoundException ex) {
            LOG.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, null, ex);
        }
    }

    private void emptyBackupFolder() {
        for (File f : backupFolder.listFiles()) {
            for(Folder fol: list){
                if(fol.file.getName().equals(f.getName())){
                    if(checkFileBackup(fol)){
                        getDirs(f);
                    }
                }
            }
        }
    }

    private void getDirs(File file) {
        System.out.println(file.getPath());
        if (file.exists()) {
            if (file.isDirectory()) {
                for (File f : file.listFiles()) {
                    getDirs(f);
                }
                file.delete();
            } else if (file.isFile()) {
                file.delete();
            }
        }
    }

    private void addButtonAction() {
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            addFileToList(file);
        }
        updateTable();
    }
    
    private void addFileToList(File file){
        list.add(new Folder(nItems++, file));
    }

    private void updateBackupTable() {
        if(backupFolder != null){
            model2.setRowCount(0);
            for (File file : backupFolder.listFiles()) {
                try {
                    BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
                    Calendar created = Calendar.getInstance();
                    created.setTimeInMillis(attr.creationTime().toMillis());
                    Calendar modified = Calendar.getInstance();
                    modified.setTimeInMillis(attr.lastModifiedTime().toMillis());
                
                    double size = FileUtils.sizeOf(file)/1024.0;
                    size = Math.round(size*100.0)/100.0;
                    Object[] obj = new Object[]{file.getName(), file.getPath(), size+"", sdf.format(created.getTime()), sdf.format(modified.getTime())};
                    model2.addRow(obj);
                } catch (IOException ex) {
                    LOG.log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private boolean checkFileBackup(Folder f) {
        System.out.println(f.file.getName());
        for(int i = 0; i < model.getRowCount() ; i++){
            int id = new Integer((String) model.getValueAt(i, 0));
            if(id == f.id){
                return (boolean) model.getValueAt(i, 6);
            }
        }
        return false;
    }
}
